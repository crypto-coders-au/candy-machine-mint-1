{"version":3,"sources":["utils/candy-machine.ts","components/MintButton.tsx","pages/PageOne.tsx","pages/PageTwo.tsx","pages/PageThree.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","ms","CounterText","styled","renderCounter","days","hours","minutes","seconds","completed","MintButton","props","useState","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","open","message","severity","undefined","startDate","setStartDate","useAnchorWallet","setCandyMachine","onMint","mintTxId","txTimeout","onError","onSuccess","msg","code","indexOf","getBalance","balance","LAMPORTS_PER_SOL","useEffect","Button","disabled","onClick","variant","CircularProgress","date","onMount","onComplete","renderer","Connection","CANDYMACHINE","TierOne","alertState","setAlertState","then","Container","component","maxWidth","Box","sx","marginTop","display","flexDirection","alignItems","textAlign","marginBottom","overflow","src","alt","width","height","Typography","toLocaleString","Snackbar","autoHideDuration","onClose","Alert","network","process","REACT_APP_TREASURY_ADDRESS","REACT_APP_CANDY_MACHINE_CONFIG","REACT_APP_CANDY_MACHINE_ID","REACT_APP_SOLANA_NETWORK","rpcHost","REACT_APP_SOLANA_RPC_HOST","theme","parseInt","REACT_APP_CANDY_START_DATE","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","autoConnect","path","PageTwo","PageThree","PageOne","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.889c9d2e.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection;\n  program: anchor.Program;\n}\n\ninterface CandyMachineState {\n  candyMachine: CandyMachine;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  goLiveDate: Date,\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = \"recent\",\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineState> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"recent\",\n  });\n\n  const idl = await anchor.Program.fetchIdl(\n    CANDY_MACHINE_PROGRAM,\n    provider\n  );\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n  const candyMachine = {\n    id: candyMachineId,\n    connection,\n    program,\n  }\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  let goLiveDate = state.data.goLiveDate.toNumber();\n  goLiveDate = new Date(goLiveDate * 1000);\n\n  return {\n    candyMachine,\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n  };\n}\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getTokenWallet = async (\n  wallet: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey\n) => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachine,\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\n  payer: anchor.web3.PublicKey,\n  treasury: anchor.web3.PublicKey,\n): Promise<string> => {\n  const mint = anchor.web3.Keypair.generate();\n  const token = await getTokenWallet(payer, mint.publicKey);\n  const { connection, program } = candyMachine;\n  const metadata = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const rent = await connection.getMinimumBalanceForRentExemption(\n    MintLayout.span\n  );\n\n  return await program.rpc.mintNft({\n    accounts: {\n      config,\n      candyMachine: candyMachine.id,\n      payer: payer,\n      wallet: treasury,\n      mint: mint.publicKey,\n      metadata,\n      masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n    },\n    signers: [mint],\n    instructions: [\n      anchor.web3.SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports: rent,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        payer,\n        payer\n      ),\n      createAssociatedTokenAccountInstruction(\n        token,\n        payer,\n        payer,\n        mint.publicKey\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        token,\n        payer,\n        [],\n        1\n      ),\n    ],\n  });\n}\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"../utils/candy-machine\";\n\nconst CounterText = styled.span``; // add your styles here\n\nexport interface MintButtonProps {\n  candyMachineId: anchor.web3.PublicKey;\n  config: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  treasury: anchor.web3.PublicKey;\n  txTimeout: number;\n\n  onSuccess?: (success: any) => void;\n  onError?: (error: any) => void;\n}\n\nconst MintButton = (props: MintButtonProps) => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      if (wallet && candyMachine?.program) {\n        const mintTxId = await mintOneToken(\n          candyMachine,\n          props.config,\n          wallet.publicKey,\n          props.treasury\n        );\n\n        const status = await awaitTransactionSignatureConfirmation(\n          mintTxId,\n          props.txTimeout,\n          props.connection,\n          \"singleGossip\",\n          false\n        );\n\n        if (!status?.err) {\n          //success\n          if (props.onSuccess) props.onSuccess(true);\n        } else {\n          // error\n          if (props.onError) props.onError(\"Mint failed! Please try again!s\");\n        }\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          setIsSoldOut(true);\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      if (props.onError) props.onError(message);\n    } finally {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n      setIsMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n\n  useEffect(() => {\n    (async () => {\n      if (!wallet) return;\n\n      const { candyMachine, goLiveDate, itemsRemaining } =\n        await getCandyMachineState(\n          wallet as anchor.Wallet,\n          props.candyMachineId,\n          props.connection\n        );\n\n      console.log(\n        await getCandyMachineState(\n          wallet as anchor.Wallet,\n          props.candyMachineId,\n          props.connection\n        )\n      );\n\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  }, [wallet, props.candyMachineId, props.connection]);\n\n  return (\n    <Button\n      disabled={isSoldOut || isMinting || !isActive}\n      onClick={onMint}\n      variant=\"contained\"\n    >\n      {isSoldOut ? (\n        \"SOLD OUT\"\n      ) : isActive ? (\n        isMinting ? (\n          <CircularProgress />\n        ) : (\n          \"MINT\"\n        )\n      ) : (\n        <Countdown\n          date={startDate}\n          onMount={({ completed }) => completed && setIsActive(true)}\n          onComplete={() => setIsActive(true)}\n          renderer={renderCounter}\n        />\n      )}\n    </Button>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n  return (\n    <CounterText>\n      {hours} hours, {minutes} minutes, {seconds} seconds\n    </CounterText>\n  );\n};\n\nexport default MintButton;\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  Container,\n  Box,\n  Typography,\n  Hidden,\n} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL, PublicKey } from \"@solana/web3.js\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n// import { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"../utils/candy-machine\";\nimport MintButton from \"../components/MintButton\";\n\nconst connection = new anchor.web3.Connection(\"https://api.devnet.solana.com/\");\n\nconst CANDYMACHINE = {\n  id: new PublicKey(\"AkKwzkNoMW9jwrkZpYvhfFXJoGbP3FmizXzw3MbUvBJF\"),\n  treasury: new PublicKey(\"Acf2R8R5vRGhQ4PGpXRbGBRsHwoZYpn3TvrKyb9Zj6Ew\"),\n  config: new PublicKey(\"AuTLgvGhpjH6iPNMoxrcwnxhaaZgKtMAj4nBWf78byJ\"),\n  startDate: 1630422000000,\n  txTimeout: 30000,\n};\n\nconst TierOne = () => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const [startDate, setStartDate] = useState(new Date(CANDYMACHINE.startDate));\n\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  if (wallet) {\n    connection.getBalance(wallet.publicKey).then((balance) => {\n      setBalance(balance / LAMPORTS_PER_SOL);\n    });\n  }\n\n  const onSuccess = () => {\n    setAlertState({\n      open: true,\n      message: \"Congratulations! Mint succeeded!\",\n      severity: \"success\",\n    });\n  };\n  const onError = () => {\n    setAlertState({\n      open: true,\n      message: \"Mint failed! Please try again!\",\n      severity: \"error\",\n    });\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <Box\n        sx={{\n          marginTop: 64,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          textAlign: \"center\",\n        }}\n      >\n        <Box\n          sx={{\n            marginTop: 8,\n            marginBottom: 8,\n            maxWidth: \"100%\",\n            overflow: \"hidden\",\n          }}\n        >\n          <img\n            src=\"images/banner.png\"\n            alt=\"Deeper Tones\"\n            width=\"100%\"\n            height=\"100%\"\n          />\n        </Box>\n        <Box>\n          <Typography component=\"h1\" variant=\"h4\">\n            Deeper Tones Candy Machine\n          </Typography>\n          <Typography component=\"p\" variant=\"body1\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\n            ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n            aliquip ex ea commodo consequat. Duis aute irure dolor in\n            reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n            culpa qui officia deserunt mollit anim id est laborum.\n          </Typography>\n        </Box>\n        {/* {wallet && <p>Address: {wallet.publicKey.toBase58()}</p>} */}\n\n        <Box\n          sx={{\n            marginTop: 32,\n          }}\n        >\n          <Typography component=\"h2\" variant=\"h5\">\n            Mint Your Very Own Green NFT\n          </Typography>\n          <Typography component=\"p\" variant=\"overline\">\n            Minting Price 1 SOL\n          </Typography>\n\n          {!wallet ? (\n            <WalletDialogButton>Connect Wallet</WalletDialogButton>\n          ) : (\n            <MintButton\n              connection={connection}\n              candyMachineId={CANDYMACHINE.id}\n              config={CANDYMACHINE.config}\n              startDate={CANDYMACHINE.startDate}\n              treasury={CANDYMACHINE.treasury}\n              txTimeout={CANDYMACHINE.txTimeout}\n              onSuccess={onSuccess}\n              onError={onError}\n            ></MintButton>\n          )}\n          {wallet && (\n            <Typography component=\"p\" variant=\"overline\">\n              Balance {(balance || 0).toLocaleString()} SOL\n            </Typography>\n          )}\n        </Box>\n\n        <Snackbar\n          open={alertState.open}\n          autoHideDuration={6000}\n          onClose={() => setAlertState({ ...alertState, open: false })}\n        >\n          <Alert\n            onClose={() => setAlertState({ ...alertState, open: false })}\n            severity={alertState.severity}\n          >\n            {alertState.message}\n          </Alert>\n        </Snackbar>\n      </Box>\n    </Container>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nexport default TierOne;\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  Container,\n  Box,\n  Typography,\n  Hidden,\n} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL, PublicKey } from \"@solana/web3.js\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n// import { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"../utils/candy-machine\";\nimport MintButton from \"../components/MintButton\";\n\nconst connection = new anchor.web3.Connection(\"https://api.devnet.solana.com/\");\n\nconst CANDYMACHINE = {\n  id: new PublicKey(\"AkKwzkNoMW9jwrkZpYvhfFXJoGbP3FmizXzw3MbUvBJF\"),\n  treasury: new PublicKey(\"Acf2R8R5vRGhQ4PGpXRbGBRsHwoZYpn3TvrKyb9Zj6Ew\"),\n  config: new PublicKey(\"AuTLgvGhpjH6iPNMoxrcwnxhaaZgKtMAj4nBWf78byJ\"),\n  startDate: 1630422000000,\n  txTimeout: 30000,\n};\n\nconst TierOne = () => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const [startDate, setStartDate] = useState(new Date(CANDYMACHINE.startDate));\n\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  if (wallet) {\n    connection.getBalance(wallet.publicKey).then((balance) => {\n      setBalance(balance / LAMPORTS_PER_SOL);\n    });\n  }\n\n  const onSuccess = () => {\n    setAlertState({\n      open: true,\n      message: \"Congratulations! Mint succeeded!\",\n      severity: \"success\",\n    });\n  };\n  const onError = () => {\n    setAlertState({\n      open: true,\n      message: \"Mint failed! Please try again!\",\n      severity: \"error\",\n    });\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <Box\n        sx={{\n          marginTop: 64,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          textAlign: \"center\",\n        }}\n      >\n        <Box\n          sx={{\n            marginTop: 8,\n            marginBottom: 8,\n            maxWidth: \"100%\",\n            overflow: \"hidden\",\n          }}\n        >\n          <img\n            src=\"images/banner.png\"\n            alt=\"Deeper Tones\"\n            width=\"100%\"\n            height=\"100%\"\n          />\n        </Box>\n        <Box>\n          <Typography component=\"h1\" variant=\"h4\">\n            Deeper Tones Candy Machine\n          </Typography>\n          <Typography component=\"p\" variant=\"body1\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\n            ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n            aliquip ex ea commodo consequat. Duis aute irure dolor in\n            reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n            culpa qui officia deserunt mollit anim id est laborum.\n          </Typography>\n        </Box>\n        {/* {wallet && <p>Address: {wallet.publicKey.toBase58()}</p>} */}\n\n        <Box\n          sx={{\n            marginTop: 32,\n          }}\n        >\n          <Typography component=\"h2\" variant=\"h5\">\n            Mint Your Very Own Red Token\n          </Typography>\n          <Typography component=\"p\" variant=\"overline\">\n            Minting Price 2 SOL\n          </Typography>\n\n          {!wallet ? (\n            <WalletDialogButton>Connect Wallet</WalletDialogButton>\n          ) : (\n            <MintButton\n              connection={connection}\n              candyMachineId={CANDYMACHINE.id}\n              config={CANDYMACHINE.config}\n              startDate={CANDYMACHINE.startDate}\n              treasury={CANDYMACHINE.treasury}\n              txTimeout={CANDYMACHINE.txTimeout}\n              onSuccess={onSuccess}\n              onError={onError}\n            ></MintButton>\n          )}\n          {wallet && (\n            <Typography component=\"p\" variant=\"overline\">\n              Balance {(balance || 0).toLocaleString()} SOL\n            </Typography>\n          )}\n        </Box>\n\n        <Snackbar\n          open={alertState.open}\n          autoHideDuration={6000}\n          onClose={() => setAlertState({ ...alertState, open: false })}\n        >\n          <Alert\n            onClose={() => setAlertState({ ...alertState, open: false })}\n            severity={alertState.severity}\n          >\n            {alertState.message}\n          </Alert>\n        </Snackbar>\n      </Box>\n    </Container>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nexport default TierOne;\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  Container,\n  Box,\n  Typography,\n  Hidden,\n} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL, PublicKey } from \"@solana/web3.js\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n// import { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"../utils/candy-machine\";\nimport MintButton from \"../components/MintButton\";\n\nconst connection = new anchor.web3.Connection(\"https://api.devnet.solana.com/\");\n\nconst CANDYMACHINE = {\n  id: new PublicKey(\"AkKwzkNoMW9jwrkZpYvhfFXJoGbP3FmizXzw3MbUvBJF\"),\n  treasury: new PublicKey(\"Acf2R8R5vRGhQ4PGpXRbGBRsHwoZYpn3TvrKyb9Zj6Ew\"),\n  config: new PublicKey(\"AuTLgvGhpjH6iPNMoxrcwnxhaaZgKtMAj4nBWf78byJ\"),\n  startDate: 1630422000000,\n  txTimeout: 30000,\n};\n\nconst TierOne = () => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const [startDate, setStartDate] = useState(new Date(CANDYMACHINE.startDate));\n\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  if (wallet) {\n    connection.getBalance(wallet.publicKey).then((balance) => {\n      setBalance(balance / LAMPORTS_PER_SOL);\n    });\n  }\n\n  const onSuccess = () => {\n    setAlertState({\n      open: true,\n      message: \"Congratulations! Mint succeeded!\",\n      severity: \"success\",\n    });\n  };\n  const onError = () => {\n    setAlertState({\n      open: true,\n      message: \"Mint failed! Please try again!\",\n      severity: \"error\",\n    });\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <Box\n        sx={{\n          marginTop: 64,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          textAlign: \"center\",\n        }}\n      >\n        <Box\n          sx={{\n            marginTop: 8,\n            marginBottom: 8,\n            maxWidth: \"100%\",\n            overflow: \"hidden\",\n          }}\n        >\n          <img\n            src=\"images/banner.png\"\n            alt=\"Deeper Tones\"\n            width=\"100%\"\n            height=\"100%\"\n          />\n        </Box>\n        <Box>\n          <Typography component=\"h1\" variant=\"h4\">\n            Deeper Tones Candy Machine\n          </Typography>\n          <Typography component=\"p\" variant=\"body1\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\n            ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n            aliquip ex ea commodo consequat. Duis aute irure dolor in\n            reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n            culpa qui officia deserunt mollit anim id est laborum.\n          </Typography>\n        </Box>\n        {/* {wallet && <p>Address: {wallet.publicKey.toBase58()}</p>} */}\n\n        <Box\n          sx={{\n            marginTop: 32,\n          }}\n        >\n          <Typography component=\"h2\" variant=\"h5\">\n            Mint Your Very Own Black Token\n          </Typography>\n          <Typography component=\"p\" variant=\"overline\">\n            Minting Price 3 SOL\n          </Typography>\n\n          {!wallet ? (\n            <WalletDialogButton>Connect Wallet</WalletDialogButton>\n          ) : (\n            <MintButton\n              connection={connection}\n              candyMachineId={CANDYMACHINE.id}\n              config={CANDYMACHINE.config}\n              startDate={CANDYMACHINE.startDate}\n              treasury={CANDYMACHINE.treasury}\n              txTimeout={CANDYMACHINE.txTimeout}\n              onSuccess={onSuccess}\n              onError={onError}\n            ></MintButton>\n          )}\n          {wallet && (\n            <Typography component=\"p\" variant=\"overline\">\n              Balance {(balance || 0).toLocaleString()} SOL\n            </Typography>\n          )}\n        </Box>\n\n        <Snackbar\n          open={alertState.open}\n          autoHideDuration={6000}\n          onClose={() => setAlertState({ ...alertState, open: false })}\n        >\n          <Alert\n            onClose={() => setAlertState({ ...alertState, open: false })}\n            severity={alertState.severity}\n          >\n            {alertState.message}\n          </Alert>\n        </Snackbar>\n      </Box>\n    </Container>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nexport default TierOne;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { Tabs, Tab } from \"@material-ui/core\";\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport PageOne from \"./pages/PageOne\";\nimport PageTwo from \"./pages/PageTwo\";\nimport PageThree from \"./pages/PageThree\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nconst treasury = new anchor.web3.PublicKey(\n  process.env.REACT_APP_TREASURY_ADDRESS!\n);\n\nconst config = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\n);\n\nconst candyMachineId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n  palette: {\n    type: \"dark\",\n  },\n  overrides: {\n    MuiButtonBase: {\n      root: {\n        justifyContent: \"flex-start\",\n      },\n    },\n    MuiButton: {\n      root: {\n        textTransform: undefined,\n        padding: \"12px 16px\",\n      },\n      startIcon: {\n        marginRight: 8,\n      },\n      endIcon: {\n        marginLeft: 8,\n      },\n    },\n  },\n});\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSlopeWallet(),\n      getSolflareWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    []\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Router>\n              <Switch>\n                <Route path=\"/two\">\n                  <PageTwo />\n                </Route>\n                <Route path=\"/three\">\n                  <PageThree />\n                </Route>\n                <Route>\n                  <PageOne />\n                </Route>\n              </Switch>\n            </Router>\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}